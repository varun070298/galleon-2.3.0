package org.lnicholls.galleon.database;/* * Copyright (C) 2005 Leon Nicholls *  * This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public * License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later * version. *  * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. *  * You should have received a copy of the GNU General Public License along with this program; if not, write to the Free * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. *  * See the file "COPYING" for more details. */import java.util.ArrayList;import java.util.List;import net.sf.hibernate.HibernateException;import net.sf.hibernate.Query;import net.sf.hibernate.ScrollableResults;import net.sf.hibernate.Session;import net.sf.hibernate.Transaction;import org.apache.log4j.Logger;import org.lnicholls.galleon.util.Tools;public class TheaterManager {	private static Logger log = Logger			.getLogger(TheaterManager.class.getName());	public static interface Callback {		public void visit(Session session, Theater Theater);	}	public static Theater retrieveTheater(Theater Theater)			throws HibernateException {		return retrieveTheater(Theater.getId());	}	public static Theater retrieveTheater(Integer id) throws HibernateException {		Theater result = null;		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			result = (Theater) session.load(Theater.class, id);			tx.commit();		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}		return result;	}	public static Theater createTheater(Theater Theater)			throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			session.save(Theater);			tx.commit();		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}		return Theater;	}	public static void updateTheater(Theater Theater) throws HibernateException {		if (Theater.getId()!=null)		{			Session session = HibernateUtil.openSession();				Transaction tx = null;				try {					tx = session.beginTransaction();					session.update(trim(Theater));					tx.commit();				} catch (HibernateException he) {					if (tx != null)						tx.rollback();					throw he;				} finally {					HibernateUtil.closeSession();				}		}	}	public static void deleteTheater(Theater Theater) throws HibernateException {		if (Theater.getId()!=null)		{			Session session = HibernateUtil.openSession();				Transaction tx = null;				try {					tx = session.beginTransaction();					session.delete(trim(Theater));					tx.commit();				} catch (HibernateException he) {					if (tx != null)						tx.rollback();					throw he;				} finally {					HibernateUtil.closeSession();				}		}	}	public static List listAll() throws HibernateException {		List list = new ArrayList();		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			list = session.createQuery(					"from org.lnicholls.galleon.database.Theater").list();			tx.commit();		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}		return list;	}	public static List listBetween(int start, int end)			throws HibernateException {		List list = new ArrayList();		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			Query query = session					.createQuery("from org.lnicholls.galleon.database.Theater");			ScrollableResults items = query.scroll();			int counter = start;			if (items.first()) {				items.scroll(start);				while (items.next() && (counter < end)) {					Theater Theater = (Theater) items.get(0);					list.add(Theater);					counter++;				}			}			tx.commit();		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}		return list;	}	public static void scroll(Callback callback) throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			Query q = session					.createQuery("from org.lnicholls.galleon.database.Theater");			ScrollableResults items = q.scroll();			if (items.first()) {				items.beforeFirst();				while (items.next()) {					Theater Theater = (Theater) items.get(0);					callback.visit(session, Theater);				}				;			}			tx.commit();		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	public static List findByPath(String path) throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			List list = session					.createQuery(					"from org.lnicholls.galleon.database.Theater as Theater where Theater.path=?")					.setString(0, path).list();			tx.commit();			return list;		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	public static List findByOrigen(String origen) throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			List list = session					.createQuery(					"from org.lnicholls.galleon.database.Theater as Theater where Theater.origen=?")					.setString(0,					origen).list();			tx.commit();			return list;		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	public static List findByName(String name) throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			List list = session					.createQuery(					"from org.lnicholls.galleon.database.Theater as Theater where Theater.name=?")					.setString(0,					name).list();			tx.commit();			return list;		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	public static List findByExternalId(String id) throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			List list = session					.createQuery(							"from org.lnicholls.galleon.database.Theater as Theater where Theater.externalId=?")					.setString(					0, id).list();			tx.commit();			return list;		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	public static List listTitles() throws HibernateException {		Session session = HibernateUtil.openSession();		Transaction tx = null;		try {			tx = session.beginTransaction();			List list = session					.createQuery(					"select Theater.title from org.lnicholls.galleon.database.Theater as Theater")					.list();			tx.commit();			return list;		} catch (HibernateException he) {			if (tx != null)				tx.rollback();			throw he;		} finally {			HibernateUtil.closeSession();		}	}	private static Theater trim(Theater theater)	{		if (theater != null) {			theater.setAddress(Tools.trim(theater.getAddress(), 255));			theater.setName(Tools.trim(theater.getName(), 255));			theater.setTelephone(Tools.trim(theater.getTelephone(), 255));		}		return theater;	}}